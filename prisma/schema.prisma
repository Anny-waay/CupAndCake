// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid()) @db.Uuid
  role          UserRole
  name          String
  phone_number  String
  email         String         @unique
  password      String
  favourites    Favourites[]
  shopping_cart ShoppingCart[]
}

model Product {
  id            String         @id @default(uuid()) @db.Uuid
  name          String         @unique
  type          ProductType
  price         Float
  picture       String
  favourites    Favourites[]
  shopping_cart ShoppingCart[]
  special       Special?
}

model UniqueProduct {
  id            String         @id @default(uuid()) @db.Uuid
  type          ProductType
  biscuit       Biscuit
  cream         Cream
  filling       Filling
  design        String
  price         Float?
  picture       String
  favourites    Favourites[]
  shopping_cart ShoppingCart[]
}

model Special {
  id         String   @id @default(uuid()) @db.Uuid
  product    Product  @relation(fields: [product_id], references: [id])
  product_id String   @unique @db.Uuid
  new_price  Float
  end_date   DateTime
}

model Favourites {
  id                String         @id @default(uuid()) @db.Uuid
  user              User           @relation(fields: [user_id], references: [id])
  user_id           String         @db.Uuid
  product           Product?       @relation(fields: [product_id], references: [id])
  product_id        String?        @db.Uuid
  unique_product    UniqueProduct? @relation(fields: [unique_product_id], references: [id])
  unique_product_id String?        @db.Uuid
}

model ShoppingCart {
  id                String         @id @default(uuid()) @db.Uuid
  user              User           @relation(fields: [user_id], references: [id])
  user_id           String         @db.Uuid
  product           Product?       @relation(fields: [product_id], references: [id])
  product_id        String?        @db.Uuid
  unique_product    UniqueProduct? @relation(fields: [unique_product_id], references: [id])
  unique_product_id String?        @db.Uuid
  order             Order?         @relation(fields: [order_id], references: [id])
  order_id          String?        @db.Uuid
}

model Order {
  id            String         @id @default(uuid()) @db.Uuid
  creation_date DateTime       @default(now())
  status        OrderStatus
  payment       PaymentType
  delivery      DeliveryType
  address       String
  devivery_date DateTime
  shopping_cart ShoppingCart[]
}

enum UserRole {
  CUSTOMER
  MANAGER
}

enum ProductType {
  CAKE
  BENTO
  CUPCAKE
  DONUT
  MACARONI
  DRINK
}

enum Biscuit {
  VANILLA
  CHOCOLATE
}

enum Cream {
  CHEESE
  CHOCOLATE
}

enum Filling {
  STRAWBERRY
  BLACKBERRY
}

enum OrderStatus {
  CREATED
  CONFIRMED
  PROCESSED
  READY
  RECIEVED
  CANCELED
}

enum DeliveryType {
  COURIER
  PICKUP
}

enum PaymentType {
  CASH
  CREDIT_CARD
}
